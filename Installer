#!/usr/bin/env bash
#  ╦═╗╦╔═╗╔═╗  ╦╔╗╔╔═╗╔╦╗╔═╗╦  ╦  ╔═╗╦═╗
#  ╠╦╝║║  ║╣   ║║║║╚═╗ ║ ╠═╣║  ║  ║╣ ╠╦╝
#  ╩╚═╩╚═╝╚═╝  ╩╝╚╝╚═╝ ╩ ╩ ╩╩═╝╩═╝╚═╝╩╚═
#   Author: https://github.com/gh0stzk
#   Redone by: https://github.com/adityastomar67

##--> Vars <--##
CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)
backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)
dependencies=(base-devel pacman-contrib bspwm polybar sxhkd
	tmux brightnessctl dunst rofi lsd
	jq polkit-gnome git playerctl mpd
	ncmpcpp geany ranger mpc picom fzf
	feh ueberzug maim pamixer libwebp
	webp-pixbuf-loader xorg-xprop xorg-xkill physlock papirus-icon-theme
	ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-inconsolata ttf-joypixels
	zsh zsh-history-substring-search)

##--> Check if it's running as root <--##
if [ "$(id -u)" = 0 ]; then
	echo "This script MUST NOT be run as root user."
	exit 1
fi

##--> Main Entry point of script <--##
_mainScript_() {
	logo "Welcome!"
	printf "%sThis script will install needed dependencies and copy my dotfiles to your bspwm setup.%s\n\n" "${CRE}" "${CNC}"
	printf "This installer script does NOT change any configuration of your system.\nIts just a script that copies and moves my dotfiles to your ~/.config directory\n\n"
	sleep 5

	while true; do
		read -rp " Do you wish to continue? [y/N]: " yn
		case $yn in
		[Yy]*) break ;;
		[Nn]*) exit ;;
		*) printf "✗ Error: just write 'y' or 'n'\n\n" ;;
		esac
	done
	install_pkg
	install_yay
	setup_rice
	# install_eww
	enable_services

	chsh -s /usr/bin/zsh
	zsh

	logo "Installation Finished!"
	printf "%sReboot is necessary, then choose bspwm in your login manager and login.%s\n" "${BLD}" "${CNC}"
	sleep 5
}

##--> Logo <--##
logo() {
	clear
	local text="${1:?}"
	echo -en "                                  
	               %%%                
	        %%%%%//%%%%%              
	      %%************%%%           
	  (%%//############*****%%
	%%%%%**###&&&&&&&&&###**//
	%%(**##&&&#########&&&##**
	%%(**##*****#####*****##**%%%
	%%(**##     *****     ##**
	   //##   @@**   @@   ##//
	     ##     **###     ##
	     #######     #####//
	       ###**&&&&&**###
	       &&&         &&&
	       &&&////   &&
	          &&//@@@**
	            ..***                
			  z0mbi3 Script (adityastomar67 fork)\n\n"
	printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
	sleep 2
}

##--> Check if the package is already installed or not <--##
is_installed() {
	pacman -Qi $1 &>/dev/null
	return $?
}

##--> Install necessary pkgs <--##
install_pkg() {
	logo "Installing Packages..."
	printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
	for package in "${dependencies[@]}"; do
		if ! is_installed $package; then
			sudo pacman -S $package --noconfirm
			printf "\n"
		else
			printf '%s✓ %s is already installed on your system!%s\n' "${CGR}" "$package" "${CNC}"
			sleep 1
		fi
	done
	sleep 2
}

##--> Install AUR helper Yay <--##
install_yay() {
	logo "Checking if yay is installed"

	if ! command -v yay &>/dev/null; then
		printf "%s%s✗ Error YAY is not installed%s\n" "${BLD}" "${CRE}" "${CNC}"
		sleep 1
		printf "%s%s→ Installing YAY..%s\n\n" "${BLD}" "${CYE}" "${CNC}"
		git clone --quiet https://aur.archlinux.org/yay.git
		cd yay
		makepkg -si
		cd $HOME
		rm -rf yay
	else
		printf "%s%s✓ YAY is already installed on your system%s\n" "${BLD}" "${CGR}" "${CNC}"
	fi
	sleep 2
}

##--> Install Eww for cool GUIs <--##
install_eww() {
	logo "Installing needed packages from AUR"
	yay -S eww --noconfirm --removemake --cleanafter
	printf "%s%s✓ EWW Installed!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2
}

##--> Setup the config file and backup old ones <--##
setup_rice() {
	##--> Cloning <--##
	logo "Cloning Rice..."
	[ -d ~/dotfiles ] && rm -rf ~/dotfiles
	printf "→ Cloning gh0stzk's rice. (adityastomar67 fork)\n\n"
	cd $HOME
	git clone --quiet --depth=1 https://github.com/adityastomar67/dots.git $HOME/dotfiles
	printf "%s%s✓ Configuration Cloned to $HOME/dotfiles.%s" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	##--> Backup <--##
	logo "Backing up files..."
	printf "→ Backup files will be stored in %s%s%s/.RiceBackup%s \n\n" "${BLD}" "${CRE}" "$HOME" "${CNC}"
	sleep 2

	if [ ! -d "$backup_folder" ]; then
		mkdir -p "$backup_folder"
	fi

	[ -d $HOME/.config ] && cd $HOME/.config
	for file in bspwm alacritty picom rofi eww sxhkd dunst polybar ncmpcpp tmux nvim ranger tmux zsh st dmenu mpd; do
		if [ -L "$file" ]; then
			command rm -rf "$file"
			printf "%s✗ $file is a symlink and removed%s" "${CRE}" "${CNC}"
		elif [ -d "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file folder backed up successfully at $backup_folder/config/${file}_$date%s" "${CGR}" "${CNC}"
		elif [ -f "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file file backed up successfully at $backup_folder/config/${file}_$date%s" "${CGR}" "${CNC}"
		else
			printf "%s✗ $file not found!%s" "${CRE}" "${CNC}"
		fi
	done

	[ -d $HOME/.local/bin ] && cd $HOME/.local/bin
	for file in $(command ls ~/dotfiles/misc/bin/); do
		if [ -L "$file" ]; then
			command rm -rf "$file"
			printf "%s✗ $file is a symlink and removed%s" "${CRE}" "${CNC}"
		elif [ -d "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file folder backed up successfully at $backup_folder/bin/${file}_$date%s" "${CGR}" "${CNC}"
		elif [ -f "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file file backed up successfully at $backup_folder/bin/${file}_$date%s" "${CGR}" "${CNC}"
		else
			printf "%s✗ $file not found!%s" "${CRE}" "${CNC}"
		fi
	done

	[ -d $HOME/.local/share/asciiart ] && cd $HOME/.local/share/asciiart
	for file in $(command ls ~/dotfiles/misc/asciiart/); do
		if [ -L "$file" ]; then
			command rm -rf "$file"
			printf "%s✗ $file is a symlink and removed%s" "${CRE}" "${CNC}"
		elif [ -d "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file folder backed up successfully at $backup_folder/ascii/${file}_$date%s" "${CGR}" "${CNC}"
		elif [ -f "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file file backed up successfully at $backup_folder/ascii/${file}_$date%s" "${CGR}" "${CNC}"
		fi
	done

	[ -L ~/.zshrc ] && rm -rf ~/.zshrc ||
		[ -f ~/.zshrc ] && mv ~/.zshrc $backup_folder/.zshrc-backup-"$(date +%Y.%m.%d-%H.%M.%S)"

	[ -L ~/.tmux.conf ] && rm -rf ~/.tmux.conf ||
		[ -f ~/.tmux.conf ] && mv ~/.tmux.conf $backup_folder/.tmux.conf-backup-"$(date +%Y.%m.%d-%H.%M.%S)"

	printf "%s%s✓ Backup Done!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	##--> Copy the Files <--##
	logo "Copying Rice..."
	printf "→ Linking files to respective directories..\n"

	[ ! -d ~/.config ] && mkdir -p ~/.config
	[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
	[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
	[ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts
	[ ! -d ~/.local/share/asciiart ] && mkdir -p ~/.local/share/asciiart

	for archive in $(command ls ~/dotfiles/config/); do
		ln -s ~/dotfiles/config/$archive ~/.config/$archive
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s folder linked succesfully!%s\n" "${BLD}" "${CGR}" "${archive}" "${CNC}"
		else
			printf "%s%s✗ %s failed to been linked, you must do it manually%s\n" "${BLD}" "${CRE}" "${archive}" "${CNC}"
			sleep 1
		fi
	done

	for archive in $(command ls ~/dotfiles/misc/bin/); do
		ln -s ~/dotfiles/misc/bin/$archive ~/.local/bin/$archive
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s folder linked succesfully!%s\n" "${BLD}" "${CGR}" "${archive}" "${CNC}"
		else
			printf "%s%s✗ %s failed to been linked, you must do it manually%s\n" "${BLD}" "${CRE}" "${archive}" "${CNC}"
			sleep 1
		fi
	done

	for archive in ~/dotfiles/misc/applications/*; do
		command cp -R ${archive} ~/.local/share/applications/
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${archive}" "${CNC}"
		else
			printf "%s%s✗ %s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${archive}" "${CNC}"
			sleep 1
		fi
	done

	for archive in ~/dotfiles/misc/fonts/*; do
		command cp -R ${archive} ~/.local/share/fonts/
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s copied succesfully!%s\n" "${BLD}" "${CGR}" "${archive}" "${CNC}"
		else
			printf "%s%s✗ %s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${archive}" "${CNC}"
			sleep 1
		fi
	done

	for archive in $(command ls ~/dotfiles/misc/asciiart/); do
		ln -s ~/dotfiles/misc/asciiart/$archive ~/.local/share/asciiart/$archive
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s folder linked succesfully!%s\n" "${BLD}" "${CGR}" "${archive}" "${CNC}"
		else
			printf "%s%s✗ %s failed to been linked, you must do it manually%s\n" "${BLD}" "${CRE}" "${archive}" "${CNC}"
			sleep 1
		fi
	done
	printf "%s%s✓ Files copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	logo "Configuring ZSH & Tmux"
	ln -s $HOME/dotfiles/home/.tmux.conf $HOME/.tmux.conf && printf "%s→ Tmux conf linked succesfully!%s\n" "${CGR}" "${CNC}"
	ln -s $HOME/dotfiles/home/.zshrc $HOME/.zshrc && printf "%s→ Zshrc linked succesfully!%s\n" "${CGR}" "${CNC}"
	[ -f $HOME/.local/bin/alacritty ] && chmod +x $HOME/.local/bin/alacritty
	printf "%s%s✓ Done succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	logo "Caching fonts..."
	fc-cache -rv >/dev/null 2>&1
	printf "%s%s✓ Fonts copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	logo "Configuring Suckless Tools"
	[ -d $HOME/.local/bin/st ] && cd $HOME/.local/bin/st
	printf "%s→ Installing ST Terminal%s" "${CYE}" "${CNC}"
	sudo make clean install >/dev/null 2>&1

	[ -d $HOME/.local/bin/dmenu ] && cd $HOME/.local/bin/dmenu
	printf "%s→ Installing Dmenu%s" "${CYE}" "${CNC}"
	sudo make clean install >/dev/null 2>&1

	printf "%s%s✓ Done succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2
}

##--> Enable necessary services <--##
enable_services() {
	if is_installed lightdm; then
		sudo systemctl enable lightdm -f
		printf '%s✓ LightDM services enabled on your system!%s\n' "${CGR}" "${CNC}"
		sleep 2
	fi
	logo "Enabling MPD service"
	systemctl --user enable mpd.service
	systemctl --user start mpd.service
	printf "%s%s✓ Services enabled!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2
}

_mainScript_
