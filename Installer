#!/usr/bin/env bash
#  ╦═╗╦╔═╗╔═╗  ╦╔╗╔╔═╗╔╦╗╔═╗╦  ╦  ╔═╗╦═╗
#  ╠╦╝║║  ║╣   ║║║║╚═╗ ║ ╠═╣║  ║  ║╣ ╠╦╝
#  ╩╚═╩╚═╝╚═╝  ╩╝╚╝╚═╝ ╩ ╩ ╩╩═╝╩═╝╚═╝╩╚═
#   Author: https://github.com/gh0stzk
#   Redone by: https://github.com/adityastomar67

##--> Vars <--##
CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)
backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)
dependencies=(base-devel rustup pacman-contrib bspwm polybar sxhkd \
			  alacritty brightnessctl dunst rofi lsd \
			  jq polkit-gnome git playerctl mpd fzf \
			  ncmpcpp geany ranger mpc picom tmux \
			  feh ueberzug maim pamixer libwebp xdg-user-dirs \
			  webp-pixbuf-loader xorg-xprop xorg-xkill physlock papirus-icon-theme \
			  ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-inconsolata ttf-joypixels \
			  zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting xorg-xsetroot)

##--> Check if it's running as root <--##
if [ "$(id -u)" = 0 ]; then
	echo "This script MUST NOT be run as root user."
	exit 1
fi

##--> Main Entry point of script <--##
_mainScript_() {
	logo "Welcome!"
	printf "%sThis script will install needed dependencies and copy my dotfiles to your bspwm setup.%s\n\n" "${CRE}" "${CNC}"
	printf "This installer script does NOT change any configuration of your system.\nIts just a script that copies and moves my dotfiles to your ~/.config directory\n\n"
	sleep 5

	while true; do
		read -rp "Do you wish to continue? [y/N]: " yn
		case $yn in
		[Yy]*) break ;;
		[Nn]*) exit ;;
		*) printf "✗ Error: just write 'y' or 'n'\n\n" ;;
		esac
	done

	install_pkg
	logo "Preparing Folders"
	if [ ! -e $HOME/.config/user-dirs.dirs ]; then
		xdg-user-dirs-update
		echo "Creating xdg-user-dirs"
	else
		echo "user-dirs.dirs already exists"
	fi	
	sleep 2 

	setup_rice
	install_eww
	enable_services

	# Mozilla Firefox rice
	firefox_css

	logo "Installation Finished!"
	printf "%sReboot is necessary, then choose bspwm in your login manager and login.%s\n" "${BLD}" "${CNC}"
	printf "%s%sRun dotup command to update configs anytime.%s\n\n" "${BLD}" "${CYE}" "${CNC}"

	while true; do
		read -rp "Do you wish to remove your backup configs? [y/N]: " yn
		case $yn in
		[Yy]*) rm -rf $backup_folder && break ;;
		[Nn]*) echo "Backup files stored at $backup_folder" && break ;;
		*) printf "✗ Error: just write 'y' or 'n'\n\n" ;;
		esac
	done
	sleep 5

	# Setting up Zsh
	logo "Setting up zsh"
	bash <(curl -s https://raw.githubusercontent.com/adityastomar67/zsh-conf/master/install.zsh)
}

##--> Logo <--##
logo() {
	clear
	local text="${1:?}"
	echo -en "
	               %%%
	        %%%%%//%%%%%
	      %%************%%%
	  (%%//############*****%%
	%%%%%**###&&&&&&&&&###**//
	%%(**##&&&#########&&&##**
	%%(**##*****#####*****##**%%%
	%%(**##     *****     ##**
	   //##   @@**   @@   ##//
	     ##     **###     ##
	     #######     #####//
	       ###**&&&&&**###
	       &&&         &&&
	       &&&////   &&
	          &&//@@@**
	            ..***
			  z0mbi3 Script (adityastomar67 fork)\n\n"
	printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
	sleep 2
}

##--> Check if the package is already installed or not <--##
is_installed() {
	pacman -Qi $1 &>/dev/null
	return $?
}

##--> Install necessary pkgs <--##
install_pkg() {
	logo "Installing Packages..."
	printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
	for package in "${dependencies[@]}"; do
		if ! is_installed $package; then
			sudo pacman -S $package --noconfirm
			printf "\n"
		else
			printf '%s✓ %s is already installed on your system!%s\n' "${CGR}" "$package" "${CNC}"
			sleep 1
		fi
	done
	sleep 2
}

##--> Install AUR helper Yay <--##
install_yay() {
	logo "Checking if yay is installed"

	if ! is_installed yay; then
		printf "%s%s✗ Error YAY is not installed%s\n" "${BLD}" "${CRE}" "${CNC}"
		sleep 1
		printf "%s%s→ Installing YAY..%s\n\n" "${BLD}" "${CYE}" "${CNC}"
		git clone --quiet https://aur.archlinux.org/yay.git
		cd yay
		makepkg -si
		cd $HOME
		rm -rf yay
	else
		printf "%s%s✓ YAY is already installed on your system%s\n" "${BLD}" "${CGR}" "${CNC}"
	fi
	sleep 2
}

##--> Install Eww for cool GUIs <--##
install_eww() {

	logo "Installing EWW & Paru..."

	if ! is_installed paru; then
		printf "%s%sInstalling paru%s\n" "${BLD}" "${CBL}" "${CNC}"
		cd
		git clone https://aur.archlinux.org/paru-bin.git
		cd paru-bin
		makepkg -si --noconfirm
		cd
	else
		printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	fi

	if ! is_installed eww; then 
		printf "\n%s%sInstalling Eww, this could take 10 mins or more.%s\n" "${BLD}" "${CBL}" "${CNC}"
		cd
		paru -S eww --skipreview --noconfirm
		rm -rf {paru-bin,.cargo,.rustup}
		rm -rf $HOME/.cache/paru/clone/eww
	else
		printf "\n%s%sEww is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	fi
	sleep 5
	printf "%s%sDone%s\n" "${BLD}" "${CGR}" "${CNC}"
}

##--> Setup the config file and backup old ones <--##
setup_rice() {
	##--> Cloning <--##
	logo "Cloning Rice..."
	[ -d ~/dotfiles ] && rm -rf ~/dotfiles
	printf "→ Cloning gh0stzk's rice. (adityastomar67 fork)\n\n"

	cd $HOME && git clone --quiet --depth=1 https://github.com/adityastomar67/dots.git $HOME/dotfiles
	printf "%s%s✓ Configuration Cloned to $HOME/dotfiles.%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	##--> Backup <--##
	logo "Backing up files..."
	printf "→ Backup files will be stored in %s%s%s/.RiceBackup%s \n\n" "${BLD}" "${CRE}" "$HOME" "${CNC}"
	sleep 2

	# Check if backup folder exists
	if [ ! -d "$backup_folder" ]; then
		mkdir -p "$backup_folder"
	fi

	# Backing up the .config files
	[ -d $HOME/.config ] && cd $HOME/.config
	for file in $(command ls ~/dotfiles/config/); do
		if [ -L "$file" ]; then
			command rm -rf "$file"
			printf "%s✗ $file is a symlink and removed%s\n" "${CRE}" "${CNC}"
			sleep 1
		elif [ -d "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file folder backed up successfully at $backup_folder/config/${file}_$date%s\n" "${CGR}" "${CNC}"
			sleep 1
		elif [ -f "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file file backed up successfully at $backup_folder/config/${file}_$date%s\n" "${CGR}" "${CNC}"
			sleep 1
		else
			printf "%s✗ $file not found!%s\n" "${CRE}" "${CNC}"
			sleep 1
		fi
	done

	# Backing up the local bin files
	[ -d $HOME/.local/bin ] && cd $HOME/.local/bin
	for file in $(command ls ~/dotfiles/misc/bin/); do
		if [ -L "$file" ]; then
			command rm -rf "$file"
			printf "%s✗ $file is a symlink and removed%s\n" "${CRE}" "${CNC}"
			sleep 1
		elif [ -d "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file folder backed up successfully at $backup_folder/bin/${file}_$date%s\n" "${CGR}" "${CNC}"
			sleep 1
		elif [ -f "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file file backed up successfully at $backup_folder/bin/${file}_$date%s\n" "${CGR}" "${CNC}"
			sleep 1
		else
			printf "%s✗ $file not found!%s\n" "${CRE}" "${CNC}"
			sleep 1
		fi
	done

	# Backing up all the asciiarts
	[ -d $HOME/.local/share/asciiart ] && cd $HOME/.local/share/asciiart
	for file in $(command ls ~/dotfiles/misc/asciiart/); do
		if [ -L "$file" ]; then
			command rm -rf "$file"
			printf "%s✗ $file is a symlink and removed%s\n" "${CRE}" "${CNC}"
			sleep 1
		elif [ -d "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file folder backed up successfully at $backup_folder/ascii/${file}_$date%s\n" "${CGR}" "${CNC}"
			sleep 1
		elif [ -f "$file" ]; then
			command mv -f "$file" "$backup_folder/${file}_$date"
			printf "%s✓ $file file backed up successfully at $backup_folder/ascii/${file}_$date%s\n" "${CGR}" "${CNC}"
			sleep 1
		else
			printf "%s✗ $file not found!%s\n" "${CRE}" "${CNC}"
			sleep 1
		fi
	done

	# Backing up the zsh config
	[ -L ~/.zshrc ] && rm -rf ~/.zshrc ||
		[ -f ~/.zshrc ] && mv ~/.zshrc $backup_folder/.zshrc-backup-"$(date +%Y.%m.%d-%H.%M.%S)"

	# Backing up the tmux config
	[ -L ~/.tmux.conf ] && rm -rf ~/.tmux.conf ||
		[ -f ~/.tmux.conf ] && mv ~/.tmux.conf $backup_folder/.tmux.conf-backup-"$(date +%Y.%m.%d-%H.%M.%S)"

	printf "\n\n%s%s✓ Backup Done!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	##--> Copy the Files <--##
	logo "Copying Rice..."
	printf "→ Linking files to there respective directories..\n"

	# Creating all the important directories
	[ ! -d ~/.config ] && mkdir -p ~/.config
	[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
	[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
	[ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts
	[ ! -d ~/.local/share/asciiart ] && mkdir -p ~/.local/share/asciiart

	# Linking the .config files
	for conf in $(command ls ~/dotfiles/config/); do
		ln -s ~/dotfiles/config/$conf ~/.config/$conf
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s folder linked succesfully!%s\n" "${BLD}" "${CGR}" "${conf}" "${CNC}"
			sleep 1
		else
			printf "%s%s✗ %s failed to been linked, you must do it manually%s\n" "${BLD}" "${CRE}" "${conf}" "${CNC}"
			sleep 1
		fi
	done

	# Linking the local bin files
	for file in $(command ls ~/dotfiles/misc/bin/); do
		ln -s ~/dotfiles/misc/bin/$file ~/.local/bin/$file
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s linked succesfully!%s\n" "${BLD}" "${CGR}" "${file}" "${CNC}"
			sleep 1
		else
			printf "%s%s✗ %s failed to been linked, you must do it manually%s\n" "${BLD}" "${CRE}" "${file}" "${CNC}"
			sleep 1
		fi
	done

	# Linking all the applications
	for art in ~/dotfiles/misc/applications/*; do
		command cp -R ${art} ~/.local/share/applications/
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${art}" "${CNC}"
			sleep 1
		else
			printf "%s%s✗ %s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${art}" "${CNC}"
			sleep 1
		fi
	done

	# Linking ascii art for terminal bling
	for art in $(command ls ~/dotfiles/misc/asciiart/); do
		ln -s ~/dotfiles/misc/asciiart/$art ~/.local/share/asciiart/$art
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s folder linked succesfully!%s\n" "${BLD}" "${CGR}" "${art}" "${CNC}"
			sleep 1
		else
			printf "%s%s✗ %s failed to been linked, you must do it manually%s\n" "${BLD}" "${CRE}" "${art}" "${CNC}"
			sleep 1
		fi
	done

	printf "\n\n%s%s✓ Files copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	logo "Configuring Tmux"
	# ln -s $HOME/dotfiles/home/.tmux.conf $HOME/.tmux.conf && printf "%s→ Tmux conf linked succesfully!%s\n" "${CGR}" "${CNC}" && sleep 1
	ln -s $HOME/dotfiles/home/.zshrc $HOME/.zshrc && printf "%s→ Zshrc linked succesfully!%s\n" "${CGR}" "${CNC}" && sleep 1
	printf "\n\n%s%s✓ Done succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	logo "Caching fonts..."
	# Copying all the fonts
	for font in ~/dotfiles/misc/fonts/*; do
		command cp -R ${font} ~/.local/share/fonts/
		if [ $? -eq 0 ]; then
			printf "%s%s→ %s copied succesfully!%s\n" "${BLD}" "${CGR}" "${font}" "${CNC}"
			sleep 1
		else
			printf "%s%s✗ %s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${font}" "${CNC}"
			sleep 1
		fi
	done
	fc-cache -rv >/dev/null 2>&1
	printf "\n\n%s%s✓ Fonts copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2

	logo "Configuring Suckless Tools"
	[ -d $HOME/.local/bin/st ] && cd $HOME/.local/bin/st
	printf "%s→ Installing ST Terminal%s\n" "${CYE}" "${CNC}"
	sudo make clean install >/dev/null 2>&1

	[ -d $HOME/.local/bin/dmenu ] && cd $HOME/.local/bin/dmenu
	printf "\n%s→ Installing Dmenu%s\n" "${CYE}" "${CNC}"
	sudo make clean install >/dev/null 2>&1

	printf "\n\n%s%s✓ Done succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2
}

##--> Setup the css for firefox <--##
firefox_css() {
	logo "Installing Firefox CSS..."
	if is_installed firefox; then
		firefox &
		sleep 5
		pkill -f firefox

		for folder in chrome; do
			if [ -d "$HOME/.mozilla/firefox/*.default-release/$folder" ]; then
				command mv "$HOME"/.mozilla/firefox/*.default-release/$folder "$backup_folder"/${folder}_$date && \
				printf "%s%s→ %s copied succesfully at %s!%s\n" "${BLD}" "${CGR}" "${folder}" "$backup_folder/${folder}_$date" "${CNC}"
			else
				printf "%s✗ $folder folder does not exist in $HOME/.mozilla/firefox/!%s\n" "${CRE}" "${CNC}"
			fi
		done

		for file in user.js; do
			if [ -e "$HOME/.mozilla/firefox/*.default-release/$file" ]; then
				command mv "$HOME"/.mozilla/firefox/*.default-release/$file "$backup_folder"/${file}_$date && \
				printf "%s%s→ %s copied succesfully at %s!%s\n" "${BLD}" "${CGR}" "${file}" "$backup_folder/${file}_$date" "${CNC}"
			else
				printf "%s✗ $file file does not exist in $HOME/.mozilla/firefox/!%s\n" "${CRE}" "${CNC}"
			fi
		done
		sleep 2

		if [ -d "$HOME/.mozilla/firefox/*.default-release/" ]; then
			cp -R "$HOME/dotfiles/misc/firefox/chrome" "$HOME/.mozilla/firefox/*.default-release/"
			cp -R "$HOME/dotfiles/misc/firefox/user.js" "$HOME/.mozilla/firefox/*.default-release/"
			printf "%s%s✓ Firefox CSS Done!!%s\n" "${BLD}" "${CGR}" "${CNC}"
			sleep 2
		else
			printf "%s✗ Firefox CSS cannot be Done!!%s\n" "${CRE}" "${CNC}"
			sleep 2
		fi

	else
		printf "%s✗ firefox is not instaleed on the system%s\n" "${CRE}" "${CNC}"
		sleep 2
	fi
}

##--> Enable necessary services <--##
enable_services() {
	logo "Enabling services..."
	if is_installed lightdm; then
		sudo systemctl enable lightdm -f >/dev/null 2>&1
		printf '%s✓ LightDM services enabled on your system!%s\n\n' "${CGR}" "${CNC}"
		sleep 2
	fi
	if is_installed mpd; then
		systemctl --user enable mpd.service >/dev/null 2>&1
		systemctl --user start mpd.service >/dev/null 2>&1
		printf '%s✓ Mpd services enabled on your system!%s\n\n' "${CGR}" "${CNC}"
		sleep 2
	fi
	printf "\n%s%s✓ All required services enabled!!%s\n" "${BLD}" "${CGR}" "${CNC}"
	sleep 2
}

_mainScript_
